name: Build Binaries

on:
  workflow_dispatch:
    inputs:
      build-debug-info:
        description: 'Profile and debug the build process'
        required: false
        default: false
        type: boolean
      use-ccache:
        description: 'Enable ccache/sccache'
        required: false
        default: true
        type: boolean
  pull_request:
  push:
    branches:
      - '**'
      - '!no-build-**'

env:
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm-cache
  base-configure-command: >-
    cmake -B build
    -DCMAKE_BUILD_TYPE=RelWithDebInfo
    -DGEODE_CODEGEN_CMAKE_ARGS="-DCMAKE_C_COMPILER=clang;-DCMAKE_CXX_COMPILER=clang++;-G Ninja"
    -G Ninja
  base-build-command: |
    cmake --build build --config RelWithDebInfo --parallel
    rm bin/nightly/resources/.geode_cache

jobs:
  build-windows:
    name: Build Windows
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Prepare for Build Debug Info
        id: build-debug-info
        uses: ./.github/actions/build-debug-info
        with:
          has-sccache: ${{ inputs.use-ccache }}
        if: ${{ inputs.build-debug-info }}

      - name: Setup caches
        uses: ./.github/actions/setup-cache
        with:
          host: linux
          target: win
          use-ccache: ${{ github.event_name != 'workflow_dispatch' || inputs.use-ccache }}

      - name: Setup Ninja
        uses: ./.github/actions/setup-ninja
        with:
          host: linux

      - name: Setup CLI
        uses: geode-sdk/cli/.github/actions/setup@main

      - name: Download xwin
        uses: robinraju/release-downloader@v1.10
        with:
          repository: Jake-Shadle/xwin
          latest: true
          fileName: 'xwin-*-x86_64-unknown-linux-musl.tar.gz'
          tarBall: false
          zipBall: false
          out-file-path: "epic-xwin"

      - name: Prepare xwin
        run: |
          tar -xzf epic-xwin/xwin-*-x86_64-unknown-linux-musl.tar.gz -C epic-xwin
          mv epic-xwin/xwin-*-x86_64-unknown-linux-musl/xwin ./xwin
          ./xwin --arch x86_64 --sdk-version 10.0.22621 --accept-license list

      - name: Setup xwin Cache
        id: xwin-cache
        uses: actions/cache@v4
        with:
          path: .xwin-cache
          key: xwin-win-v1-${{ hashFiles('.xwin-cache/**/*') }}

      - name: Download Windows headers
        run: ./xwin --arch x86_64 --sdk-version 10.0.22621 --accept-license splat --include-debug-libs
        if: ${{ steps.xwin-cache.outputs.cache-hit != 'true' }}

      - name: Download clang-msvc-sdk toolchain
        uses: actions/checkout@v4
        with:
          repository: 'geode-sdk/clang-msvc-sdk'
          path: toolchain
          submodules: recursive

      - name: Configure
        run: ${{ env.base-configure-command }} -DCMAKE_TOOLCHAIN_FILE=$TOOLCHAIN ${{ steps.build-debug-info.outputs.extra-configure }}
        env:
          SPLAT_DIR: ${{ github.workspace }}/.xwin-cache/splat
          TOOLCHAIN: ${{ github.workspace }}/toolchain/clang-msvc.cmake
          HOST_ARCH: x86_64

      - name: Build
        run: |
          ${{ env.base-build-command }}
          ${{ steps.build-debug-info.outputs.extra-build }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: geode-win
          path: ./bin/nightly

      - name: Package Installer
        run: |
          sudo apt install nsis
          makensis -WX -V3 ./installer/windows/installer.nsi

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: geode-installer-win
          path: './installer/windows/geode-installer-win.exe'

      - name: Complete Build Debug Info
        uses: ./.github/actions/build-debug-info-post
        with:
          target: win
        if: ${{ inputs.build-debug-info && (success() || failure()) }}

    build-ios:
    name: Build iOS
    runs-on: macos-latest

    env:
      SCCACHE_CACHE_MULTIARCH: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Prepare for Build Debug Info
        id: build-debug-info
        uses: ./.github/actions/build-debug-info
        with:
          has-sccache: ${{ inputs.use-ccache }}
        if: ${{ inputs.build-debug-info }}

      - name: Setup Xcode
        run: sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: Configure
        run: |
          ${{ env.base-configure-command }}
          -DCMAKE_SYSTEM_NAME=iOS
          -DCMAKE_OSX_SYSROOT=iphoneos
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.0
          -DCMAKE_OSX_ARCHITECTURES="arm64"
          ${{ steps.build-debug-info.outputs.extra-configure }}

      - name: Build
        run: |
          cmake --build build --config Release --parallel
          ${{ steps.build-debug-info.outputs.extra-build }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: geode-ios
          path: ./bin/nightly

      - name: Complete Build Debug Info
        uses: ./.github/actions/build-debug-info-post
        with:
          target: ios
        if: ${{ inputs.build-debug-info && (success() || failure()) }}


  build-mac:
    name: Build macOS
    runs-on: macos-latest

    env:
      SCCACHE_CACHE_MULTIARCH: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Prepare for Build Debug Info
        id: build-debug-info
        uses: ./.github/actions/build-debug-info
        with:
          has-sccache: ${{ inputs.use-ccache }}
        if: ${{ inputs.build-debug-info }}

      - name: Setup Ninja
        uses: ./.github/actions/setup-ninja
        with:
          host: mac

      - name: Setup CLI
        uses: geode-sdk/cli/.github/actions/setup@main

      - name: Configure
        run: >
          ${{ env.base-configure-command }}
          -DCMAKE_C_COMPILER=clang
          -DCMAKE_CXX_COMPILER=clang++
          -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
          -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"
          -DGEODE_DISABLE_PRECOMPILED_HEADERS=OFF
          ${{ steps.build-debug-info.outputs.extra-configure }}

      - name: Build
        run: |
          ${{ env.base-build-command }}
          ${{ steps.build-debug-info.outputs.extra-build }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: geode-mac
          path: ./bin/nightly

      - name: Package Installer
        run: ./installer/mac/package.sh ./bin/nightly ./installer/mac/geode-installer-mac.pkg

      - name: Upload Installer
        uses: actions/upload-artifact@v4
        with:
          name: geode-installer-mac
          path: './installer/mac/geode-installer-mac.pkg'

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [build-windows, build-mac, build-ios]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Declare Version Variables
        id: ref
        run: |
          echo "version=$(cat VERSION | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')" >> $GITHUB_ENV
          echo "date=$(date -u +'%Y-%m-%d-%H-%M-%S')" >> $GITHUB_ENV

      - name: Download Windows Artifacts
        uses: actions/download-artifact@v4
        with:
          name: geode-win
          path: ./artifacts/windows

      - name: Download macOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: geode-mac
          path: ./artifacts/mac

      - name: Download iOS Artifacts
        uses: actions/download-artifact@v4
        with:
          name: geode-ios
          path: ./artifacts/ios

      - name: Prepare Release
        id: release
        uses: actions/create-release@v4
        with:
          tag_name: "v${{ env.version }}"
          release_name: "Release ${{ env.version }} - ${{ env.date }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Artifacts
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./artifacts/windows/geode-installer-win.exe
          asset_name: geode-installer-win.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS Artifacts
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./artifacts/mac/geode-installer-mac.pkg
          asset_name: geode-installer-mac.pkg
          asset_content_type: application/octet-stream

      - name: Upload iOS Artifacts
        uses: actions/upload-release-asset@v2
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./artifacts/ios/geode-ios.zip
          asset_name: geode-ios.zip
          asset_content_type: application/zip
